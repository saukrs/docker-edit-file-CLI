docker()
{
    local ARGS=("$@")

   #echo Argument count: $#
   #echo Docker cmd argument number: $(($#-3))
   #echo Container argument number: $(($#-2))
   #echo The file argument number: $(($#-1))

    local ARGNUM_OF_CMMD=$(($#-3))
    local ARGNUM_OF_SRVC=$(($#-2))
    local ARGNUM_OF_FILE=$(($#-1))

    # TODO: Count only non-option arguments (avoid options/switcher like `-d` or `--interactive` inbetween)

    if [[ "$#" < 3 || "${ARGS[$ARGNUM_OF_CMD]}" != "edit" ]]; then
        /usr/bin/env docker "$@"
        return $?
    fi

    local SRVC="${ARGS[$ARGNUM_OF_SRVC]}"
    local FILE="${ARGS[$ARGNUM_OF_FILE]}"

    # Temporary file to buffer content of the specific file from guest:
    TMPFILE=`mktemp "/tmp/bash-function-docker-edit-XXXXXXXX-$(basename $FILE).BUFFER"`

    echo TODO:
    echo Going to edit $FILE inside $SERVICE using $TMPFILE

    # The plan is to convert this command line:
    #
    #   docker ... edit CONTAINER FILE
    #
    # ... into something like that:
    #
    #   docker ... exec CONTAINER cat FILE

    # IOW:
    # - "edit", the ${ARGS[$ARGNUM_OF_CMMD]} needs to be replaced with "exec" string.
    # - FILE element needs to have an additional array element, the "cat" to be inserted before it.
    #
    #   Inserting elements into array seems to be quite of an issue in Bash:
    #   https://riptutorial.com/bash/example/19530/array-insert-function
    #
    #   Thus we proceed with overwriting instead:
    # - FILE, the ${ARGS[$ARGNUM_OF_FILE]} needs to be replaced with "cat" string.
    # - FILE needs to be appended to the array as the new element.

    local ARGS_CAT=(${ARGS[@]})
    ARGS_CAT[$ARGNUM_OF_CMMD]="exec"
    ARGS_CAT[$ARGNUM_OF_FILE]="cat"
    ARGS_CAT+=("${ARGS[$ARGNUM_OF_FILE]}")

    /usr/bin/env docker "${ARGS_CAT[@]}" > ${TMPFILE}

    ${EDITOR:-vim} ${TMPFILE} < /dev/tty > /dev/tty

    rm -v ${TMPFILE}
    return
}
