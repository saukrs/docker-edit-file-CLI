#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2022 Saulius Krasuckas
# SPDX-License-Identifier: BlueOak-1.0.0

docker()
{
    local ARGS=("$@")

   #echo Argument count: $#
   #echo Docker cmd argument number: $(($#-3))
   #echo Container argument number: $(($#-2))
   #echo The file argument number: $(($#-1))

    local _CMMD=$(($#-3))
    local _SRVC=$(($#-2))
    local _FILE=$(($#-1))

    # TODO: Count only non-option arguments (avoid options/switcher like `-d` or `--interactive` inbetween)

    if [[ "$#" < 3 || "${ARGS[$_CMMD]}" != "edit" ]]; then
        /usr/bin/env docker "$@"
        return $?
    fi

    local SRVC="${ARGS[$_SRVC]}"
    local FILE="${ARGS[$_FILE]}"

    # Temporary file to buffer content of the specific file from guest:
    TMPFILE=`mktemp "/tmp/bash-function-docker-edit-XXXXXXXX-$(basename $FILE).BUFFER"`

    echo Going to edit $FILE inside $SERVICE using $TMPFILE

    # The plan is to convert this command line:
    #
    #   docker ... edit CONTAINER FILE
    #
    # ... into something like that:
    #
    #   docker ... exec CONTAINER cat FILE

    # Inserting elements into array seems to be quite of an issue in Bash:
    # https://riptutorial.com/bash/example/19530/array-insert-function
    #
    # Thus we proceed with trimming tailf of the original command line and rewriting it instead:

    local ARGS_MAIN=(${ARGS[@]})
    unset -v ARGS_MAIN[$_CMMD]
    unset -v ARGS_MAIN[$_SRVC]
    unset -v ARGS_MAIN[$_FILE]

    # Retrieve the file from guest into buffer:
    /usr/bin/env docker "${ARGS_MAIN[@]}" exec "${ARGS[$_SRVC]}" cat "${ARGS[$_FILE]}" > ${TMPFILE}

    # Edit the buffer:
    ${EDITOR:-vim} ${TMPFILE}
    RES=$?

    # Abort on editor abort:
    if [[ ! $RES -eq 0 && ! $RES -eq 148 ]]; then
        echo Docker file editing aborted. > /dev/stderr
        return $RES
    fi

    # Wait for the editor to finish in case it was suspended:
    while [[ $RES -eq 148 ]]; do
        echo RES is $RES
        echo TODO: Implement wait for the suspended Vim process.
        fg
        echo TODO: On the 2nd Vim suspend this line becomes unreachable.

        # Maybe use `vipe` or reimplement its' logic?
        # Because it works via pipe and suspends properly:
        #
        # ~/src/diy/docker-edit-file-cli$ cat /etc/hosts | vipe | wc
        #
        # [3]+  Stopped                 cat /etc/hosts | vipe | wc
        #
        # ~/src/diy/docker-edit-file-cli$ fg
        # cat /etc/hosts | vipe | wc
        # vim exited nonzero, aborting
        #       0       0       0
        #
        # ~/src/diy/docker-edit-file-cli$ cat /etc/hosts | vipe | wc
        #      12      30     270

        RES=$?
    done

    # Push the buffer contents into the original file on guest:
    /usr/bin/env docker "${ARGS_MAIN[@]}" exec -T "${ARGS[$_SRVC]}" sh -c "cat > ${ARGS[$_FILE]}" < ${TMPFILE}

    rm -v ${TMPFILE}
    return 0
}
